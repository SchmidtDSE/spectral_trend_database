{"version":"1","records":[{"hierarchy":{"lvl1":"Spectral Trend Database"},"type":"lvl1","url":"/","position":0},{"hierarchy":{"lvl1":"Spectral Trend Database"},"content":"","type":"content","url":"/","position":1},{"hierarchy":{"lvl1":"Spectral Trend Database","lvl2":"LINKS"},"type":"lvl2","url":"/#links","position":2},{"hierarchy":{"lvl1":"Spectral Trend Database","lvl2":"LINKS"},"content":"repo: \n\nhttps://​github​.com​/SchmidtDSE​/spectral​_trend​_database","type":"content","url":"/#links","position":3},{"hierarchy":{"lvl1":"Spectral Trend Database","lvl2":"OUTLINE"},"type":"lvl2","url":"/#outline","position":4},{"hierarchy":{"lvl1":"Spectral Trend Database","lvl2":"OUTLINE"},"content":"What is the spectral trend database\n\nOverview of spectral indices\n\nSample Point selection\n\nData harminzation\n\nUsage\n\nBig Query\n\nPython API\n\nGoogle Earth Engine","type":"content","url":"/#outline","position":5},{"hierarchy":{"lvl1":"Sample Selection"},"type":"lvl1","url":"/data","position":0},{"hierarchy":{"lvl1":"Sample Selection"},"content":"Corn Soy Other (GEE)\n\ncsob_ic <= for each year [2000,2020]:\n\nselect cdl for year\n\nmap to corn / soy / other\n\nremove borders:\n\nreduce neighborhood (90-meters)\n\nim = neighborhood_im.where(neighborhood_im.neq(im), BORDER_VALUE).toInt()\n\nresult im each CSO value is CSO iff its at least 90-meters from a different value otherwise B\n\nrequire at least 15 years of CSO value (out of 20) to be continual_im\n\nstratified_sample of continual_im C-S-O-B [10k,10k,2k,2k]\n\nresult projects/dse-regenag/assets/CDL/cornsoy_other-n60-y15-p20000\n\n=> 24,000 features (10,000 Corn)\n\nscript: \n\nhttps://​code​.earthengine​.google​.com​/c25c8860c473c39ee301448ca8571a6e\nvisulaization script: (wip) \n\nhttps://​code​.earthengine​.google​.com​/e6c0ee4ec7d3212580d2a9edeaecd3b4\nasset: projects/dse-regenag/assets/CDL/cornsoy_other-n60-y15-p20000\n\n\n\nFigure 1:Masking border values in CDL. Left: corn/soy and other, center: 60-meter radius neighborhood reduction, right: masked borders\n\nUSDA’s \n\nCrop Land Data Layer was used to create a set of corn/soy sample points, i.e. points CDL labels as (in most cases alternating between) corn or soy for at least 15 years from 2000 to 2020. In order ensure we had “pure” pixels away from confounding effects of boarders and infrastructure 60-meter raidus neighborhood reductions and only kept pixel values that remained unchanged (see \n\nFigure 1). From the resulting image we selecting an initial 20,000 corn/soy points.\n\nYIELD DATA (GEE)\n\nselect cornsoy points from csob (described above)\n\nmap over each point:\na. filter qdann corn xor soy by point\nb. compute value or neighborhood value of biomass at that point\nc. filter out values with no biomass\nd. flatten results\n\nscript: \n\nhttps://​code​.earthengine​.google​.com​/595bedc5425c99e83fc41de9ebf39c69\n\nWe then used these sample points to extract yield values based on \n\nQDANN (2008-2022).","type":"content","url":"/data","position":1},{"hierarchy":{"lvl1":"Description"},"type":"lvl1","url":"/intro","position":0},{"hierarchy":{"lvl1":"Description"},"content":" start_overview \n\nDSE’s Spectral Trends Database monitors uses data from NASA’s Landsat satellites to track over 14,000 points in corn and soy fields in the midwestern United States. The database contains daily values for 36 different vegetation indices from the year 2000 to present, along with a number of derivative metrics that are useful for detecting crop planting and harvesting. The data will be useful for myriad agriculture applications, including the study and monitoring of yield, yield-stability, soil\nhealth, cover-cropping, and other sustainable agricultural practices. end_overview \n\n\n\nSchmidt DSE is now beginning to explore this data with a particular focus on yield-stability and cover-cropping (our collaborators at the US Department of Agriculture are particularly interested in the latter). Because this database will be public, our hope is that the data will help empower and accelerate research and action in the agricultural field more broadly.  Moreover, we are releasing an open-source codebase so that  researchers can quickly generate new databases for their own locations and metrics of interest.","type":"content","url":"/intro","position":1},{"hierarchy":{"lvl1":"Description","lvl2":"Introduction"},"type":"lvl2","url":"/intro#intro","position":2},{"hierarchy":{"lvl1":"Description","lvl2":"Introduction"},"content":"Spectral indices, mathematical combinations of pixel values, play an important role in remote sensing. The most well known example would be the Normalized Difference Vegetation Index (NDVI):\\text{NDVI} = \\frac{\\text{NIR} - \\text{RED}}{\\text{NIR} + \\text{RED}}\n\nWhy is this of interest? Vegetation appears green because the vegetation reflects green light and absorbs red light. One then might assume the difference between green and red is a good measure of vegetation. An index constructed from this difference known as the Green Normalized Difference Vegetation Index is useful for studying dense cannopies at later stages of developement. As described \n\nhere GNDVI “is an indicator of the photosynthetic activity of the vegetation cover; it is most often used in assessing the moisture content and nitrogen concentration in plant leaves according to multispectral data which do not have an extreme red channel.”\n\nThanks to multi-spectral satellites we are not confined to our lived experince of visible wavelengths. It turns out that the cell structures within plants also reflect Near Infrared (NIR). The difference between NIR and RED is a good indicator of the “is a measure of the amount and vigor of vegetation on the land surface” (\n\nusda). The denominator in \n\n(1) is normilization term so that \\text{NDVI} \\subset [-1:1].\n\nIn addition to NDVI and GNDVI there are myriad other spectral indices of interest, each with its own particular use case from: measuring water content within vegetation, to detecting water bodies or human infrastrutue, and quantifying soil moisture and soil health.\n\nThe direct goal of the Spectral Trend Database (STDB) is to compute and\ntrack a large number (\n\n36) spectral-indices over corn and soy fields from 2000 to present. The database currently is based on Landsat satellites, however we are in the process of generating the same data (2018 to present) using Sentinel-2.  This data should prove useful to a large number of applications in the study of agricultural remote sensing, including the study of yeild, yeild-stablity, cover-croping and other regenerative agricultural practices and soil health.\n\nThis particular datasbase has been constructed for studying corn and soy. The general techniques, however, are applicable to a number of other scientific studies. Our open-source code base is constructed to allow the user to easily re-run these calcuations for their particular sample points, data sources, time periods, and spectral indices of interest, broadening the potential applications far beyond corn and soy, or even agricultural studies.","type":"content","url":"/intro#intro","position":3},{"hierarchy":{"lvl1":"Scripts"},"type":"lvl1","url":"/scripts","position":0},{"hierarchy":{"lvl1":"Scripts"},"content":"\n\nnote: this section describes various scripts used to generate data and will likely not be part of any public facing document\n\n[0] EXPORT LANDSAT DATA\n\nLoad Sample Yield data\n\nAdd geohashes\n\nFor each year:\n\nAdd Harmonized Landsat Pixel Values\n\nSave results, local and GCS, as line-deliminated JSON files\n\n[1] PREPROCESS RAW DATA\n\nLoad and Concatenate CSVs from GCP\n\nRemove missing band values (tested using green only)\n\nRequrie unique lon-lat per geohash-7\n\nremove nan/none values from coord-arrays\n\nrequire c.MIN_REQUIRED_YEARS per geohash\n\nAdd County/State Data\n\nSave results, local and GCS, as line-deliminated JSON\n\n[2] BIGQUERY TABLES\n\nbreak data into (unique/sorted) subsets and save to GCS\n\ncreate tables based on subsets saved on GCS\n\n[3] RAW SPECTRAL INDICES\n\ncreate table for raw spectral indices\n\nfor each year (2000-2022):\n\ncompute all indices\n\nsave to gcs\n\nsave as bigquery table\n\n[4] GAP FILLING AND SMOOTHING\n\n...\n\n[5] COVER CROP FEATURES\n\nfor smoothed daily indices compute:\na. macd(div) features\n\n[6] INDICIES STATS\n\n...","type":"content","url":"/scripts","position":1},{"hierarchy":{"lvl1":"Biomass Yield and Spectral Trends"},"type":"lvl1","url":"/spectral-trends","position":0},{"hierarchy":{"lvl1":"Biomass Yield and Spectral Trends"},"content":"date: 2024-12-12\nauthors:\n    - name: Brookie Guzder-Williams\naffiliations:\n    - University of California Berkeley, The Eric and Wendy Schmidt Center for Data Science & Environment\nlicense: CC-BY-4.0\n\nThis notebook uses DSE’s \n\nSpectral Trend Database (STDB) to\nproduce and interactive chart displaying Biomass Yield vs a number of different spectral incides over time.\n\nFetch Data for a random point: We use STDS’s \n\nquery module and in particular the \n\nQueryConstructor to generate a ...\n\nBuild Chart\n\nSave Chart JSON to improve responsiveness of chart\n\n","type":"content","url":"/spectral-trends","position":1},{"hierarchy":{"lvl1":"Biomass Yield and Spectral Trends","lvl2":"IMPORTS"},"type":"lvl2","url":"/spectral-trends#imports","position":2},{"hierarchy":{"lvl1":"Biomass Yield and Spectral Trends","lvl2":"IMPORTS"},"content":"\n\nfrom importlib import reload\nfrom typing import Callable, Union, Optional, Literal, TypeAlias, Sequence, Any\nimport re\nfrom pprint import pprint\nimport random\nimport pandas as pd\nimport numpy as np\nimport xarray as xr\nimport tensorflow as tf\nfrom IPython.display import HTML\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport altair as alt\nfrom spectral_trend_database.config import config as c\nfrom spectral_trend_database import query\nfrom spectral_trend_database import utils\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import HistGradientBoostingClassifier\nfrom sklearn import metrics\n\n","type":"content","url":"/spectral-trends#imports","position":3},{"hierarchy":{"lvl1":"Biomass Yield and Spectral Trends","lvl2":"CONFIG"},"type":"lvl2","url":"/spectral-trends#config","position":4},{"hierarchy":{"lvl1":"Biomass Yield and Spectral Trends","lvl2":"CONFIG"},"content":"\n\nBQ_PREFIX = 'dse-regenag.BiomassTrends'\nSAMPLE_FRAC = 0.0005\nYEAR_START = 2008\nYEAR_END = 2020\nSTART_MMDD = '11-01'\nEND_MMDD = START_MMDD\nATTR_COLS = [\n    'sample_id',\n    'lon',\n    'lat']\nLIST_ATTRS = [\n    'year',\n    'biomass',\n    'crop_type']\nCHART_DATA_PATH = 'spectral_trends.chart_data.json'\n\n","type":"content","url":"/spectral-trends#config","position":5},{"hierarchy":{"lvl1":"Biomass Yield and Spectral Trends","lvl2":"HELPER METHODS"},"type":"lvl2","url":"/spectral-trends#helper-methods","position":6},{"hierarchy":{"lvl1":"Biomass Yield and Spectral Trends","lvl2":"HELPER METHODS"},"content":"\n\ndef print_list(lst, max_len=7, view_size=3, sep=', ', connector=' ... '):\n    size = len(lst)\n    if size <= max_len:\n        lst_str = sep.join(lst)\n    else:\n        head = sep.join(lst[:view_size])        \n        tail = sep.join(lst[-view_size:])\n        lst_str = f'{head}{connector}{tail}  [{size}]'\n    print(lst_str)\n\ndef line(marker='-', length=100):\n    print(marker*length)\n\n","type":"content","url":"/spectral-trends#helper-methods","position":7},{"hierarchy":{"lvl1":"Biomass Yield and Spectral Trends","lvl2":"STDB DATABASE INFO"},"type":"lvl2","url":"/spectral-trends#stdb-database-info","position":8},{"hierarchy":{"lvl1":"Biomass Yield and Spectral Trends","lvl2":"STDB DATABASE INFO"},"content":"First we’ll take a quick peak at the what is in the STDB database\n\nYIELD_TABLE = 'SCYM_YIELD'\nSMOOTHED_INDICES_TABLE = 'SMOOTHED_INDICES_V1'\nIDENT_DATE_COLUMNS = ['sample_id', 'year', 'date']\n\nCOLUMN_NAMES = {}\nprint('DATABASE INFO')\nline()\nquery = reload(query)\ntable_names = query.table_names()\nprint('TABLES:')\npprint(table_names)\nfor table_name in [YIELD_TABLE, SMOOTHED_INDICES_TABLE]:\n    COLUMN_NAMES[table_name] = query.column_names(table_name, run_query=True)\n    print(f'\\n{table_name}:')\n    print_list(COLUMN_NAMES[table_name])\nline()\n\nINDICES = [c for c in COLUMN_NAMES[SMOOTHED_INDICES_TABLE] if c not in IDENT_DATE_COLUMNS]\nprint_list(INDICES)\n\n","type":"content","url":"/spectral-trends#stdb-database-info","position":9},{"hierarchy":{"lvl1":"Biomass Yield and Spectral Trends","lvl2":"1. Fetch Data"},"type":"lvl2","url":"/spectral-trends#id-1-fetch-data","position":10},{"hierarchy":{"lvl1":"Biomass Yield and Spectral Trends","lvl2":"1. Fetch Data"},"content":"\n\na. select a small number of sample ids\n\nqc = query.QueryConstructor('SAMPLE_POINTS', table_prefix=BQ_PREFIX)\nqc.select('sample_id')\nqc.append(f'WHERE RAND() < {SAMPLE_FRAC}')\nsample_ids_df = query.run(sql=qc.sql(), print_sql=True)\nsample_ids_df = sample_ids_df.drop_duplicates()\nprint('nb_samples:', sample_ids_df.shape[0])\n\nb. fetch data for selected samples\n\ndef fetch_yield_and_trend_data(\n        year_start: int,\n        year_end: Optional[int] = None,\n        sample_id: Optional[Union[list[str], str]] = None,\n        print_sql: Optional[bool] = False,\n        limit: Optional[int] = None) -> pd.DataFrame:\n    \"\"\"\n    Builds and Executes a SQL Query to get all data\n    form a given set of sample_ids during a specified time \n    period.\n    \n    Args: \n        year_start (int): start year to select data\n        year_end (Optional[int] = None): \n            last year to select data from (inclusive). if None use <year_start>\n        sample_id (Optional[Union[list[str], str]] = None)\n            sample_id or list of sample-ids of data to select. if none select \n            from all samples.\n        print_sql (Optional[bool] = False)\n        limit (Optional[int] = None)\n\n    Returns:\n        pd.DataFrame of smoothed-spectral-indices\n    \"\"\"\n    if year_end is None: \n        year_end=year_start\n    qc = query.QueryConstructor(\n        'SAMPLE_POINTS', \n        table_prefix=BQ_PREFIX,\n        using=['sample_id'],  \n        how='inner')\n    qc.join('SCYM_YIELD')\n    qc.join('SMOOTHED_INDICES_V1', 'sample_id', 'year')\n    if sample_id:\n        if isinstance(sample_id, list):\n            sample_id = [f\"'{s}'\" for s in sample_id]\n            sample_ids = f'({\", \".join(sample_id)})'\n            qc.where(sample_id=sample_ids, sample_id_op='in')\n        else:\n            qc.where(sample_id=sample_id)\n    qc.where('SMOOTHED_INDICES_V1', year=year_start, year_op='>=')\n    qc.where('SMOOTHED_INDICES_V1', year=year_end, year_op='<=')\n    df = query.run(sql=qc.sql(), print_sql=print_sql)\n    return df\n\ndata = fetch_yield_and_trend_data(\n    year_start=YEAR_START,\n    year_end=YEAR_END,\n    sample_id=sample_ids_df.sample_id.tolist(),\n    print_sql=True)\n\nprint('shape:', data.shape)\ndata.sample(3)\n\nrows = data[data.sample_id == data.sample().sample_id.iloc[0]]\nrows = rows.sort_values('year').reset_index(drop=True)\n\nutils = reload(utils)\ndef filter_dates(row):\n    return dict(date=slice(f'{row.year-1}-{START_MMDD}', f'{row.year}-{END_MMDD}'))\n    \nds = utils.rows_to_xr(\n    rows, \n    coord='date', \n    sel=filter_dates, \n    attr_cols=ATTR_COLS,\n    list_attrs=LIST_ATTRS)\nds\n\nyield_biomass = { y: b for y,b in zip(ds.year, ds.biomass)}\ncrop_types = { y: b for y,b in zip(ds.year, ds.crop_type)}\ndvars = { k: ds[k].data for k in ds.data_vars }\n_df = pd.DataFrame(dvars)\n_df['date'] = ds.date.data\n_df['idx'] = list(_df.index)\n_df['year'] = _df.date.apply(lambda d: d.year)\n_df['biomass'] = _df.year.apply(lambda y: yield_biomass.get(y, None))\n_df['crop_type'] = _df.year.apply(lambda y: crop_types.get(y, 'soy'))\n\n_df.date.astype(str)\n\n# _df['date'] = _df.date.astype(str).apply(lambda d: f'{d}T00:00:01.000Z')\n# _df['date'] = pd.to_datetime(_df.date.astype(str))\n# _df.to_json(CHART_DATA_PATH, orient='records', lines=False)\n\n","type":"content","url":"/spectral-trends#id-1-fetch-data","position":11},{"hierarchy":{"lvl1":"Biomass Yield and Spectral Trends","lvl2":"CHART"},"type":"lvl2","url":"/spectral-trends#chart","position":12},{"hierarchy":{"lvl1":"Biomass Yield and Spectral Trends","lvl2":"CHART"},"content":"\n\nS = 1.25\nDEFAULT_INDEX = 'ndvi'\nHEIGHT = 400 * S\nGRAPH_WIDTH = 600 * S\nSI_COLOR = '#515e68'\nSI_OPACITY = 0.6\nYIELD_OPACITY = 0.5\nTITLE_COLOR = '#333'\nTITLE_SIZE = 22\nTITLE_WEIGHT = 200\nSUBTITLE_COLOR = '#aaa'\nSUBTITLE_SIZE = 14\nSOY_COLOR = '#4e9561'\nCORN_COLOR = '#e2d644'\n\nTITLE = 'SPECTRAL TRENDS'\nSUBTITLE = 'exploring yield as a function of spectral indices'\n\nchart_data = _df\n# chart_data = CHART_DATA_PATH\n\n# alt.data_transformers.enable(\"vegafusion\")\n\ndisplay(HTML(\"\"\"\n<style>\n  span.vega-bind-name {\n    color: #555;\n    margin: 0 10px 0 60px;\n    font-size: 20px;\n  }\n  .vega-bind label select {\n    color: #555;\n    font-size: 18px;\n  }\n</style>\n\"\"\"))\n\n# yield chart\nyield_scale = alt.Scale(\n    domain=[0.0, 3000],\n    clamp=True\n)\nyield_color_scale = alt.Scale(\n    domain=['soy', 'corn'], \n    range=[SOY_COLOR, CORN_COLOR])\nyield_yaxis = alt.Axis(title='Biomass Yield', titleFontSize=18, titleColor=TITLE_COLOR, titleFontWeight=TITLE_WEIGHT)\nyield_chart = alt.Chart(chart_data).encode(\n    x=alt.X('date:T', title=None),\n    y=alt.Y('biomass:Q', axis=yield_yaxis, scale=yield_scale),\n    color=alt.Color('crop_type:N', scale=yield_color_scale)\n).mark_area(\n    filled=True,\n    opacity=YIELD_OPACITY,\n    interpolate='step-before')\n\n# interactive spectral index chart\nsi_yaxis = alt.Axis(title='Spectral Index', titleFontSize=18, titleColor=TITLE_COLOR, titleFontWeight=TITLE_WEIGHT)\nsi_dropdown = alt.binding_select(\n    options=INDICES,\n    labels=[n.upper() for n in INDICES],\n    name='Spectral Index: '.upper()\n)\nycol_param = alt.param(\n    value=DEFAULT_INDEX,\n    bind=si_dropdown\n)\nsi_chart = alt.Chart(chart_data).encode(\n    x=alt.X('date:T', title=None),\n    y=alt.Y('y:Q', axis=si_yaxis)\n).properties(\n    width=GRAPH_WIDTH,\n    height=HEIGHT\n).transform_calculate(\n    y=f'datum[{ycol_param.name}]'\n).add_params(\n    ycol_param\n).mark_area(\n    fill=SI_COLOR,\n    fillOpacity=SI_OPACITY\n)\n\n# display\ntitle = alt.Title(\n    TITLE,\n    color=TITLE_COLOR,\n    fontSize=TITLE_SIZE,\n    fontWeight=TITLE_WEIGHT,\n    subtitle=SUBTITLE,\n    subtitleColor=SUBTITLE_COLOR,\n    subtitleFontSize=SUBTITLE_SIZE)\n\nchart = alt.layer(yield_chart, si_chart).resolve_scale(y='independent')\nchart = chart.properties(\n    title=title).configure_legend(\n    title=None,\n    labelFontSize=18,  \n    labelColor=SUBTITLE_COLOR \n).interactive()\nchart \n\n","type":"content","url":"/spectral-trends#chart","position":13}]}